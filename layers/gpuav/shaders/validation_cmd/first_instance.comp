// Copyright (c) 2021-2025 The Khronos Group Inc.
// Copyright (c) 2021-2025 Valve Corporation
// Copyright (c) 2021-2025 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#version 450
#extension GL_GOOGLE_include_directive : enable

#include "common.h"
#include "push_data.h"

layout(push_constant)
uniform PushConstants {
    FirstInstancePushData pc;
};

layout(set = kValPipeDescSet, binding = kPreDrawBinding_IndirectBuffer) 
readonly buffer DrawBuffer {
    uint draw_indexed_indirect_cmds[];
};

layout(set = kValPipeDescSet, binding = kPreDrawBinding_CountBuffer) 
readonly buffer CountBuffer {
    uint count_buffer[];
};

// Validate firstInstance member from indirect draw commands
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main() {
    const uint draw_i = gl_GlobalInvocationID.x;

    if ((pc.flags & kFirstInstanceFlags_DrawCountFromBuffer) != 0) {
        // Need to clamp draw count value stored in count buffer to the maxDrawCount
        // that was specified at vkCmdDrawIndexedIndirect time.
        // pc.api_draw_count is used to store maxDrawCount
        const uint draw_count = min(count_buffer[pc.api_count_buffer_offset_dwords], pc.api_draw_count);
        if (draw_i >= draw_count) return;
    }

    const uint draw_indexed_indirect_cmd_i = draw_i * pc.api_stride_dwords + pc.first_instance_member_pos + pc.api_offset_dwords;
    const uint first_instance = draw_indexed_indirect_cmds[ draw_indexed_indirect_cmd_i ];
    if (first_instance != 0) {
        GpuavLogError2(kErrorGroupGpuPreDraw, kErrorSubCodePreDrawFirstInstance, draw_i, first_instance);
    }
}
