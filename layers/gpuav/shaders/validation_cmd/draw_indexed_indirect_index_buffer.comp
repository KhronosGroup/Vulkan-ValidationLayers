// Copyright (c) 2021-2025 The Khronos Group Inc.
// Copyright (c) 2021-2025 Valve Corporation
// Copyright (c) 2021-2025 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#version 450

#extension GL_GOOGLE_include_directive : enable

#include "common.h"
#include "draw_push_data.h"

layout(push_constant) uniform UniformInfo {
    DrawIndexedIndirectIndexBufferPushData pc;
};

/*
Matching Struct from the API
struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};
*/
const uint kIndexCount = 0;
const uint kInstancekCount = 1;
const uint kFirstIndex = 2;
const uint kVertexOffset = 3;
const uint kFirstInstance = 4;

layout(set = kDiagPerCmdDescriptorSet, binding = kPreDrawBinding_IndirectBuffer) readonly buffer DrawBuffer {
    uint draw_indexed_indirect_cmds[];
};

// CountBuffer won't be bound for non-count draws
layout(set = kDiagPerCmdDescriptorSet, binding = kPreDrawBinding_CountBuffer) readonly buffer CountBuffer {
    uint count_buffer[];
};

// Picked 64 and 128 from quick testing of differnet values
const uint kBucketSize = 64;
const uint kThreads = 128;

layout(local_size_x = kThreads, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint draw_count = 0;
    if ((pc.flags & kIndexedIndirectDrawFlags_DrawCountFromBuffer) == 0) {
        draw_count = pc.api_draw_count;
    } else {
        // Need to clamp draw count value stored in count buffer to the maxDrawCount
        // that was specified at vkCmdDrawIndexedIndirect time.
        // pc.api_draw_count is used to store maxDrawCount
        draw_count = min(count_buffer[pc.api_count_buffer_offset_dwords], pc.api_draw_count);
    }

    // Divide the draws into buckets of N size and have 1 thread check each draw in the bucket
    const uint bucket_count = draw_count / kBucketSize;
    for (uint bucket_i = gl_LocalInvocationID.x; bucket_i < bucket_count; bucket_i += kThreads) {
        for (uint item_i = 0; item_i < kBucketSize; ++item_i) {
            const uint draw_id = (bucket_i * kBucketSize) + item_i;

            const uint draw_indexed_indirect_cmd_i = (draw_id * pc.api_stride_dwords) + pc.api_offset_dwords;
            const uint draw_i_index_count = draw_indexed_indirect_cmds[ draw_indexed_indirect_cmd_i + kIndexCount ];
            const uint draw_i_first_index = draw_indexed_indirect_cmds[ draw_indexed_indirect_cmd_i + kFirstIndex ];

            if ((draw_i_first_index + draw_i_index_count) > pc.bound_index_buffer_indices_count) {
                GpuavLogError4(kErrorGroupGpuPreDraw, kErrorSubCode_OobIndexBuffer, draw_id, draw_i_first_index, draw_i_index_count, 0);
            }
        }
    }

    // Loop the last bucket on single thread as need to do bound checks
    if (gl_LocalInvocationID.x == 0) {
        for (uint draw_id = (bucket_count * kBucketSize); draw_id < draw_count; ++draw_id) {
            const uint draw_indexed_indirect_cmd_i = (draw_id * pc.api_stride_dwords) + pc.api_offset_dwords;
            const uint draw_i_index_count = draw_indexed_indirect_cmds[ draw_indexed_indirect_cmd_i + kIndexCount ];
            const uint draw_i_first_index = draw_indexed_indirect_cmds[ draw_indexed_indirect_cmd_i + kFirstIndex ];

            if ((draw_i_first_index + draw_i_index_count) > pc.bound_index_buffer_indices_count) {
                GpuavLogError4(kErrorGroupGpuPreDraw, kErrorSubCode_OobIndexBuffer, draw_id, draw_i_first_index, draw_i_index_count, 0);
            }
        }
    }
}
