// Copyright (c) 2024-2025 The Khronos Group Inc.
// Copyright (c) 2024-2025 Valve Corporation
// Copyright (c) 2024-2025 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE: This file doesn't contain any entrypoints and should be compiled with the --no-link option for glslang

#version 450
#extension GL_GOOGLE_include_directive : enable
#include "common_descriptor_sets.h"

layout(buffer_reference, buffer_reference_align = 8, std430) buffer DescriptorIndexPostProcess {
    // size of descriptor count (including all array elements)
    // Used to mark which indexes were accessed
    uvec2 slot[]; // PostProcessDescriptorIndexSlot
};

layout(set = kInstDefaultDescriptorSet, binding = kBindingInstPostProcess, std430) buffer PostProcessSSBO {
    // There is a chance 2 sets are aliased to the same pointer
    // ex - descriptor_index_post_process_buffers[0] == descriptor_index_post_process_buffers[1]
    // But that is ok as we use the variable_id to extract thet set on the CPU
    DescriptorIndexPostProcess descriptor_index_post_process_buffers[kDebugInputBindlessMaxDescSets];
} gpuav;

void inst_post_process_descriptor_index(const uint desc_set, const uint binding, const uint desc_index, const uint binding_layout_offset, const uint variable_id) {
    DescriptorIndexPostProcess descriptor_index_post_process = gpuav.descriptor_index_post_process_buffers[desc_set];

    const uint cmd_id = inst_action_index_buffer.index[0] << kPostProcessMetaShiftActionIndex;

    // The index has been accessed, write out for post processing
    const uint binding_layout_index = binding_layout_offset + desc_index;
    descriptor_index_post_process.slot[binding_layout_index] = uvec2(kPostProcessMetaMaskAccessed | cmd_id | SpecConstantLinkShaderId, variable_id);
}