// Copyright (c) 2024 The Khronos Group Inc.
// Copyright (c) 2024 Valve Corporation
// Copyright (c) 2024 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE: This file doesn't contain any entrypoints and should be compiled with then new --no-link option for glslang

#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require
#if defined(GL_ARB_gpu_shader_int64)
#extension GL_ARB_gpu_shader_int64 : require
#else
#error No extension available for 64-bit integers.
#endif

#include "gpu_error_header.h"
#include "gpu_shaders_constants.h"

layout(set = kDefaultDescriptorSet, binding = 0, std430) buffer inst_OutputBuffer {
    uint flags;
    uint written_count;
    uint data[];
} inst_output_buffer;

layout(set = kDefaultDescriptorSet, binding = kBindingBufferDeviceAddress, std430) buffer inst_buff_addr_InputBuffer {
    uint64_t data[];
} inst_buff_addr_input_buffer;

bool inst_buffer_device_address(const uint inst_num, const uvec4 stage_info, const uint64_t addr, const uint len)
{
    uint end_idx;
    uint start_idx= 1u;
    for (;;)
    {
        end_idx = start_idx + 1u;
        if (inst_buff_addr_input_buffer.data[end_idx] > addr) {
            break;
        } else {
            start_idx = end_idx;
            continue;
        }
    }
    uint index = end_idx - 1u;
    if (((addr - inst_buff_addr_input_buffer.data[index]) + uint64_t(len)) <= inst_buff_addr_input_buffer.data[(index - 1u) + uint(inst_buff_addr_input_buffer.data[0u])]) {
      return true;
    }

    uint rec_len = 11u;
    uint write_pos = atomicAdd(inst_output_buffer.written_count, rec_len);
    if ((write_pos + rec_len) <= uint(inst_output_buffer.data.length()))
    {
        inst_output_buffer.data[write_pos + kHeaderErrorRecordSizeOffset] = rec_len;
        inst_output_buffer.data[write_pos + kHeaderShaderIdOffset] = kLinkShaderId;
        inst_output_buffer.data[write_pos + kHeaderInstructionIdOffset] = inst_num;
        inst_output_buffer.data[write_pos + kHeaderStageIdOffset] = stage_info.x;
        inst_output_buffer.data[write_pos + kHeaderStageInfoOffset_0] = stage_info.y;
        inst_output_buffer.data[write_pos + kHeaderStageInfoOffset_1] = stage_info.z;
        inst_output_buffer.data[write_pos + kHeaderStageInfoOffset_2] = stage_info.w;

        inst_output_buffer.data[write_pos + kHeaderErrorGroupOffset] = kErrorGroupInstBufferDeviceAddress;
        inst_output_buffer.data[write_pos + kHeaderErrorSubCodeOffset] = kErrorSubCodeBufferDeviceAddressUnallocRef;
        
        inst_output_buffer.data[write_pos + kInstBuffAddrUnallocDescPtrLoOffset] = uint(addr);
        inst_output_buffer.data[write_pos + kInstBuffAddrUnallocDescPtrHiOffset] = uint(addr >> 32u);
    }

    return false;
}
