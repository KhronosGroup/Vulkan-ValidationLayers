// Copyright (c) 2022-2024 The Khronos Group Inc.
// Copyright (c) 2022-2024 Valve Corporation
// Copyright (c) 2022-2024 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#version 450
#extension GL_GOOGLE_include_directive : enable
#include "gpu_pre_action.h"

layout(set = 0, binding = 1) buffer IndirectBuffer { uint indirect_buffer[]; };

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform UniformInfo {
    uint limit_x;
    uint limit_y;
    uint limit_z;
    uint indirect_x_offset;
} u_info;

void main() {
    uint indirect_x = indirect_buffer[u_info.indirect_x_offset];
    uint indirect_y = indirect_buffer[u_info.indirect_x_offset + 1];
    uint indirect_z = indirect_buffer[u_info.indirect_x_offset + 2];

    if (indirect_x > u_info.limit_x) {
        gpuavLogError(kErrorGroupGpuPreDispatch, kErrorSubCodePreDispatchCountLimitX, indirect_x, 0);
    } else if (indirect_y > u_info.limit_y) {
        gpuavLogError(kErrorGroupGpuPreDispatch, kErrorSubCodePreDispatchCountLimitY, indirect_y, 0);
    } else if (indirect_z > u_info.limit_z) {
        gpuavLogError(kErrorGroupGpuPreDispatch, kErrorSubCodePreDispatchCountLimitZ, indirect_z, 0);
    }

}
