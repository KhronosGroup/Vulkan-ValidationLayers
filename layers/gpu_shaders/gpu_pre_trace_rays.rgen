// Copyright (c) 2022 The Khronos Group Inc.
// Copyright (c) 2022-2023 Valve Corporation
// Copyright (c) 2022-2023 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#if defined(GL_ARB_gpu_shader_int64)
#extension GL_ARB_gpu_shader_int64 : require
#else
#error No extension available for 64-bit integers.
#endif

#extension GL_GOOGLE_include_directive : enable
#include "gpu_pre_action.h"

struct VkTraceRaysIndirectCommandKHR {
    uint width;
    uint height;
    uint depth;
};

layout(buffer_reference, std430) buffer IndirectCommandReference {
    VkTraceRaysIndirectCommandKHR ray_query_dimensions;
};

layout(push_constant) uniform UniformInfo {
    // Need to put the buffer reference first otherwise it is incorrect, probably an alignment issue
    IndirectCommandReference indirect_data;
    uint ray_query_width_limit;
    uint ray_query_height_limit;
    uint ray_query_depth_limit;
} u_info;


void main() {
    if (u_info.indirect_data.ray_query_dimensions.width > u_info.ray_query_width_limit) {
        gpuavLogError(kInstErrorPreTraceRaysKhrValidate, pre_trace_rays_query_dimensions_exceeds_width_limit, u_info.indirect_data.ray_query_dimensions.width, 0);
    }
    if (u_info.indirect_data.ray_query_dimensions.height > u_info.ray_query_height_limit) {
        gpuavLogError(kInstErrorPreTraceRaysKhrValidate, pre_trace_rays_query_dimensions_exceeds_height_limit, u_info.indirect_data.ray_query_dimensions.height, 0);
    }
    if (u_info.indirect_data.ray_query_dimensions.depth > u_info.ray_query_depth_limit) {
        gpuavLogError(kInstErrorPreTraceRaysKhrValidate, pre_trace_rays_query_dimensions_exceeds_depth_limit, u_info.indirect_data.ray_query_dimensions.depth, 0);
    }
}
