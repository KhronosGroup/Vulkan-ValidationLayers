// Copyright (c) 2024 The Khronos Group Inc.
// Copyright (c) 2024 Valve Corporation
// Copyright (c) 2024 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE: This file doesn't contain any entrypoints and should be compiled with then new --no-link option for glslang

#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require
#if defined(GL_ARB_gpu_shader_int64)
#extension GL_ARB_gpu_shader_int64 : require
#else
#error No extension available for 64-bit integers.
#endif

#include "gpu_error_header.h"
#include "gpu_shaders_constants.h"
#include "gpu_inst_common_descriptor_sets.h"

layout(buffer_reference) buffer DescriptorSetData;
layout(buffer_reference, buffer_reference_align = 8, std430) buffer DescriptorLayoutData {
    uint num_bindings;
    uint pad;
    uvec2 data[];
};

layout(buffer_reference, buffer_reference_align = 8, std430) buffer DescriptorSetInData {
    uvec2 data[]; // x = id, y = extra data depending on the descriptor type
};

layout(buffer_reference, buffer_reference_align = 8, std430) buffer DescriptorSetOutData {
    uint data[];
};

layout(buffer_reference, buffer_reference_align = 8, std430) buffer GlobalState {
    uint data[];
};

struct DescriptorSetRecord {
    DescriptorLayoutData layout_data;
    DescriptorSetInData in_data;
    DescriptorSetOutData out_data;
};

layout(set = kInstDefaultDescriptorSet, binding = kBindingInstBindlessDescriptor, std430) buffer BindlessStateBuffer {
    GlobalState global_state;
    DescriptorSetRecord desc_sets[32];
} inst_bindless_state_buffer;

bool inst_bindless_descriptor(const uint inst_num, const uvec4 stage_info, const uint desc_set,
                              const uint binding, const uint desc_index, const uint byte_offset) {
    uint error = 0u;
    uint param_0 = 0u;
    uint param_1 = 0u;
    uint desc_id = 0u;
    do {
        if (desc_set >= 32u) {
            error = kErrorSubCodeBindlessDescriptorBounds;
            param_0 = desc_set;
            break;
        }
        DescriptorLayoutData layout_data = inst_bindless_state_buffer.desc_sets[desc_set].layout_data;
        uvec2 layout_vec = uvec2(layout_data);
        if ((layout_vec.x == 0u) && (layout_vec.y == 0u)) {
            error = kErrorSubCodeBindlessDescriptorBounds;
            break;
        }
        if (binding >= layout_data.num_bindings) {
            error = kErrorSubCodeBindlessDescriptorBounds;
            break;
        }
        uvec2 binding_state = layout_data.data[binding];
        if (desc_index >= binding_state.x) {
            error = kErrorSubCodeBindlessDescriptorBounds;
            param_0 = binding_state.x;
            break;
        }

        DescriptorSetInData in_data = inst_bindless_state_buffer.desc_sets[desc_set].in_data;
        uvec2 in_vec = uvec2(in_data);
        if ((in_vec.x == 0u) && (in_vec.y == 0u)) {
            error = kErrorSubCodeBindlessDescriptorBounds;
            break;
        }

        // check if the descriptor was ever initialized
        uint state_index = binding_state.y + desc_index;
        desc_id = in_data.data[state_index].x & kDebugInputBindlessSkipId;
        uint desc_type = (in_data.data[state_index].x & ~kDebugInputBindlessSkipId) >> kDescBitShift;
        if (desc_id == 0u) {
            error = kErrorSubCodeBindlessDescriptorUninit;
            param_0 = binding_state.y;
            param_1 = desc_index;
            break;
        }
        if (desc_id == kDebugInputBindlessSkipId) {
            break;
        }

        // check that the resource is still valid
        uint desc_index = desc_id / 32;
        uint desc_bit = 1 << (desc_id & 31);
        bool is_valid = (inst_bindless_state_buffer.global_state.data[desc_index] & desc_bit) == 0;
        if (is_valid) {
            error = kErrorSubCodeBindlessDescriptorDestroyed;
            param_0 = binding_state.y;
            param_1 = desc_index;
            break;
        }
        if (desc_type == kImageSamplerDesc) {
            // check sampler
            desc_id = in_data.data[state_index].y;
            if (desc_id == 0u) {
                error = kErrorSubCodeBindlessDescriptorUninit;
                param_0 = binding_state.y;
                param_1 = desc_index;
                break;
            }
            // check that the resource is still valid
            desc_index = desc_id / 32;
            desc_bit = 1 << (desc_id & 31);
            is_valid = (inst_bindless_state_buffer.global_state.data[desc_index] & desc_bit) == 0;
            if (is_valid) {
                error = kErrorSubCodeBindlessDescriptorDestroyed;
                param_0 = binding_state.y;
                param_1 = desc_index;
                break;
            }
        } else if (desc_type == kTexelDesc || desc_type == kBufferDesc) {
            // check that the offset is in bounds
            uint resource_size = in_data.data[state_index].y;
            if (byte_offset >= resource_size) {
                error = kErrorSubCodeBindlessDescriptorOOB;
                param_0 = byte_offset;
                param_1 = resource_size;
                break;
            }
        }
        DescriptorSetOutData out_data = inst_bindless_state_buffer.desc_sets[desc_set].out_data;
        uvec2 out_vec = uvec2(out_data);
        if ((out_vec.x == 0u) && (out_vec.y == 0u)) {
            break;
        }
        out_data.data[state_index] = 1;
    } while (false);

    if (0u != error) {

        const uint cmd_id = inst_cmd_resource_index_buffer.index[0];
        const uint cmd_errors_count = atomicAdd(inst_cmd_errors_count_buffer.errors_count[cmd_id], 1);
        const bool max_cmd_errors_count_reached = cmd_errors_count >= kMaxErrorsPerCmd;

        if (max_cmd_errors_count_reached) return false;

        uint write_pos = atomicAdd(inst_errors_buffer.written_count, kErrorRecordSize);
        const bool errors_buffer_not_filled = (write_pos + kErrorRecordSize) <= uint(inst_errors_buffer.data.length());

        if (errors_buffer_not_filled) {
            inst_errors_buffer.data[write_pos + kHeaderErrorRecordSizeOffset] = kErrorRecordSize;
            inst_errors_buffer.data[write_pos + kHeaderShaderIdOffset] = kLinkShaderId;
            inst_errors_buffer.data[write_pos + kHeaderInstructionIdOffset] = inst_num;
            inst_errors_buffer.data[write_pos + kHeaderStageIdOffset] = stage_info.x;
            inst_errors_buffer.data[write_pos + kHeaderStageInfoOffset_0] = stage_info.y;
            inst_errors_buffer.data[write_pos + kHeaderStageInfoOffset_1] = stage_info.z;
            inst_errors_buffer.data[write_pos + kHeaderStageInfoOffset_2] = stage_info.w;

            inst_errors_buffer.data[write_pos + kHeaderErrorGroupOffset] = kErrorGroupInstBindlessDescriptor;
            inst_errors_buffer.data[write_pos + kHeaderErrorSubCodeOffset] = error;

			inst_errors_buffer.data[write_pos + kHeaderActionIdOffset] = inst_action_index_buffer.index[0];
            inst_errors_buffer.data[write_pos + kHeaderCommandResourceIdOffset] = inst_cmd_resource_index_buffer.index[0];

            inst_errors_buffer.data[write_pos + kInstBindlessDescSetOffset] = desc_set;
            inst_errors_buffer.data[write_pos + kInstBindlessDescBindingOffset] = binding;
            inst_errors_buffer.data[write_pos + kInstBindlessDescIndexOffset] = desc_index;
            inst_errors_buffer.data[write_pos + kInstBindlessCustomOffset_0] = param_0;
            inst_errors_buffer.data[write_pos + kInstBindlessCustomOffset_1] = param_1;
        }
        return false;
    }
    return true;
}