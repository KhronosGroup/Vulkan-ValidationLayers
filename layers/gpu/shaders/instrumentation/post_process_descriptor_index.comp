// Copyright (c) 2024 The Khronos Group Inc.
// Copyright (c) 2024 Valve Corporation
// Copyright (c) 2024 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE: This file doesn't contain any entrypoints and should be compiled with then new --no-link option for glslang

#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require
#if defined(GL_ARB_gpu_shader_int64)
#extension GL_ARB_gpu_shader_int64 : require
#else
#error No extension available for 64-bit integers.
#endif

#include "gpuav_error_header.h"
#include "gpuav_shaders_constants.h"
#include "common_descriptor_sets.h"

layout(buffer_reference, buffer_reference_align = 8, std430) buffer DescriptorIndexPostProcess {
    // size of descriptor count (including all array elements)
    // Used to mark which indexes were accessed
    uint slot[]; // PostProcessDescriptorIndexSlot
};

struct DescriptorSetRecord {
    uvec2 unused_ds_type;
    DescriptorIndexPostProcess descriptor_index_post_process;
};

layout(set = kInstDefaultDescriptorSet, binding = kBindingInstBindlessDescriptor, std430) buffer DescriptorStateSSBO {
    uvec2 unused_initialized_status;
    DescriptorSetRecord desc_sets[kDebugInputBindlessMaxDescSets];
} bindless_state_buffer;

void inst_post_process_descriptor_index(const uint desc_set, const uint binding, const uint desc_index, const uint binding_layout_offset) {
    DescriptorIndexPostProcess descriptor_index_post_process = bindless_state_buffer.desc_sets[desc_set].descriptor_index_post_process;
    uint binding_layout_index = binding_layout_offset + desc_index;
    // The index has been accessed, write out for post processing
    //
    // Two pointers *could* be the same pointer if shared VkDescriptorSet handles
    // ex - desc_sets[0].descriptor_index_post_process == desc_sets[1].descriptor_index_post_process
    descriptor_index_post_process.slot[binding_layout_index] = kDescriptorSetWrittenMask | desc_set;
}