// Copyright (c) 2024 The Khronos Group Inc.
// Copyright (c) 2024 Valve Corporation
// Copyright (c) 2024 LunarG, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE: This file doesn't contain any entrypoints and should be compiled with the --no-link option for glslang

#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require
#if defined(GL_ARB_gpu_shader_int64)
#extension GL_ARB_gpu_shader_int64 : require
#else
#error No extension available for 64-bit integers.
#endif

#include "gpuav_error_header.h"
#include "gpuav_shaders_constants.h"
#include "common_descriptor_sets.h"

layout(buffer_reference, buffer_reference_align = 8, std430) buffer DescriptorSetType {
    // struct glsl::DescriptorState {
    //   x: id
    //   y: extra data depending on the descriptor type
    // }
    uvec2 data[];
};

layout(buffer_reference, buffer_reference_align = 8, std430) buffer InitializedStatus {
    // Maps to DescriptorHeap and used to detect if descriptor is still valid on CPU
    uint data[];
};

struct DescriptorSetRecord {
    DescriptorSetType ds_type;
};

layout(set = kInstDefaultDescriptorSet, binding = kBindingInstDescriptorIndexingOOB, std430) buffer DescriptorStateSSBO {
    InitializedStatus initialized_status;
    DescriptorSetRecord desc_sets[kDebugInputBindlessMaxDescSets];
    uvec2 unused_descriptor_index_post_process_buffers[kDebugInputBindlessMaxDescSets];
} gpuav;

// Unlike the non-bindless version, bindless needs to check for Uninitialized and Destroyed descriptors.
bool inst_descriptor_indexing_oob_bindless(const uint inst_num, const uvec4 stage_info, const uint desc_set,
                              const uint binding, const uint desc_index, const uint binding_layout_size, const uint binding_layout_offset) {
    uint error = 0u;
    uint param_0 = binding_layout_size;
    do {
        // First make sure the index is not OOB
        if (desc_index >= binding_layout_size) {
            error = kErrorSubCodeDescriptorIndexingBounds;
            break;
        }

        DescriptorSetType ds_type = gpuav.desc_sets[desc_set].ds_type;

        // check if the descriptor was ever initialized
        uint binding_layout_index = binding_layout_offset + desc_index;
        uint desc_id = ds_type.data[binding_layout_index].x & kNullDescriptor;
        if (desc_id == 0u) {
            error = kErrorSubCodeDescriptorIndexingUninitialized;
            break;
        } else if (desc_id == kNullDescriptor) {
            break;
        }

        // check that the resource is still valid
        uint desc_index = desc_id / 32;
        uint desc_bit = 1 << (desc_id & 31);
        bool is_valid = (gpuav.initialized_status.data[desc_index] & desc_bit) == 0;
        if (is_valid) {
            error = kErrorSubCodeDescriptorIndexingDestroyed;
            break;
        }

        // If dealing with a combined image sampler, need to check the sampler as well
        uint desc_type = (ds_type.data[binding_layout_index].x & ~kNullDescriptor) >> kDescBitShift;
        if (desc_type == kImageSamplerDesc) {
            // check sampler
            desc_id = ds_type.data[binding_layout_index].y;
            if (desc_id == 0u) {
                error = kErrorSubCodeDescriptorIndexingUninitialized;
                break;
            }
            // check that the resource is still valid
            desc_index = desc_id / 32;
            desc_bit = 1 << (desc_id & 31);
            is_valid = (gpuav.initialized_status.data[desc_index] & desc_bit) == 0;
            if (is_valid) {
                error = kErrorSubCodeDescriptorIndexingDestroyed;
                break;
            }
        }
    } while (false);

    if (0u != error) {

        const uint cmd_id = inst_cmd_resource_index_buffer.index[0];
        const uint cmd_errors_count = atomicAdd(inst_cmd_errors_count_buffer.errors_count[cmd_id], 1);
        const bool max_cmd_errors_count_reached = cmd_errors_count >= kMaxErrorsPerCmd;

        if (max_cmd_errors_count_reached) return false;

        uint write_pos = atomicAdd(inst_errors_buffer.written_count, kErrorRecordSize);
        const bool errors_buffer_not_filled = (write_pos + kErrorRecordSize) <= uint(inst_errors_buffer.data.length());

        if (errors_buffer_not_filled) {
            inst_errors_buffer.data[write_pos + kHeaderErrorRecordSizeOffset] = kErrorRecordSize;
            inst_errors_buffer.data[write_pos + kHeaderShaderIdOffset] = kLinkShaderId;
            inst_errors_buffer.data[write_pos + kHeaderInstructionIdOffset] = inst_num;
            inst_errors_buffer.data[write_pos + kHeaderStageIdOffset] = stage_info.x;
            inst_errors_buffer.data[write_pos + kHeaderStageInfoOffset_0] = stage_info.y;
            inst_errors_buffer.data[write_pos + kHeaderStageInfoOffset_1] = stage_info.z;
            inst_errors_buffer.data[write_pos + kHeaderStageInfoOffset_2] = stage_info.w;

            inst_errors_buffer.data[write_pos + kHeaderErrorGroupOffset] = kErrorGroupInstDescriptorIndexingOOB;
            inst_errors_buffer.data[write_pos + kHeaderErrorSubCodeOffset] = error;

            inst_errors_buffer.data[write_pos + kHeaderActionIdOffset] = inst_action_index_buffer.index[0];
            inst_errors_buffer.data[write_pos + kHeaderCommandResourceIdOffset] = inst_cmd_resource_index_buffer.index[0];

            inst_errors_buffer.data[write_pos + kInstDescriptorIndexingDescSetOffset] = desc_set;
            inst_errors_buffer.data[write_pos + kInstDescriptorIndexingDescBindingOffset] = binding;
            inst_errors_buffer.data[write_pos + kInstDescriptorIndexingDescIndexOffset] = desc_index;
            inst_errors_buffer.data[write_pos + kInstDescriptorIndexingParamOffset_0] = param_0;
        }
        return false;
    }
    return true;
}