# Copyright (c) 2021-2023 Valve Corporation
# Copyright (c) 2021-2023 LunarG, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: VVL (Build/Tests)

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  # github.head_ref is only defined on pull_request
  # Fallback to the run ID, which is guaranteed to be both unique and defined for the run.
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id  }}
  cancel-in-progress: true

on:
    push:
    pull_request:
        branches:
            - main

env:
  CMAKE_GENERATOR: Ninja

permissions:
  contents: read

jobs:
  linux:
    env:
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        compiler: [{cc: gcc, cxx: g++}]
        flags: [{c: "-fsanitize=address", ld: "-fsanitize=address"}, {c: "-fsanitize=thread", ld: "-fsanitize=thread"}]
        config: [debug, release]
        cpp_std: [17]
        robin_hood: ["ON"]
        include:
          # Test Ubuntu-20.04 release build works.
          - os: ubuntu-20.04
            compiler: {cc: gcc, cxx: g++}
            config: release
            cpp_std: 17
            robin_hood: "ON"
          # Test C++ 20 support
          - os: ubuntu-22.04
            compiler: {cc: gcc, cxx: g++}
            config: release
            cpp_std: 20
            robin_hood: "ON"
          # Test clang support
          - os: ubuntu-22.04
            compiler: {cc: clang, cxx: clang++}
            config: release
            cpp_std: 17
            robin_hood: "ON"
          # Test with Robin Hood disabled
          # Chromium build, and some package managers don't use it.
          - os: ubuntu-22.04
            compiler: {cc: clang, cxx: clang++}
            config: release
            cpp_std: 17
            robin_hood: "OFF"
            flags: [{c: "-fsanitize=address", ld: "-fsanitize=address"}]

    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.17.2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.config }}-${{ matrix.compiler.cc }}-${{ matrix.compiler.cxx }}-${{ matrix.cpp_std }}-${{ matrix.flags.c }}-${{ matrix.flags.ld }}-${{matrix.robin_hood}}
      - name: Install python dependencies
        run: python3 -m pip install jsonschema pyparsing
      - name: Install WSI dependencies
        run: sudo apt-get -qq update && sudo apt-get install -y libwayland-dev xorg-dev
      - name: Build
        run: python scripts/tests.py --build --config ${{ matrix.config }} --cmake='-DVVL_CPP_STANDARD=${{ matrix.cpp_std }} -DUSE_ROBIN_HOOD_HASHING=${{matrix.robin_hood}}'
        env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
          CFLAGS: ${{ matrix.flags.c }}
          CXXFLAGS: ${{ matrix.flags.c }}
          LDFLAGS: ${{ matrix.flags.ld }}
      - name: Test Max Profile
        run: python scripts/tests.py --test
        env:
          VK_KHRONOS_PROFILES_PROFILE_FILE: ${{ github.workspace }}/tests/device_profiles/max_profile.json
      - name: Test Max Core
        run: python scripts/tests.py --test
        env:
          VK_KHRONOS_PROFILES_PROFILE_FILE: ${{ github.workspace }}/tests/device_profiles/max_core.json
      - name: Test Min Core
        run: python scripts/tests.py --test
        env:
          VK_KHRONOS_PROFILES_PROFILE_FILE: ${{ github.workspace }}/tests/device_profiles/min_core.json

  androidOnLinux:
    env:
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.17.2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: androidOnLinux-ccache
      - name: Install python dependencies
        run: python3 -m pip install jsonschema pyparsing
      - name: Install WSI dependencies
        run: sudo apt-get -qq update && sudo apt-get install -y libwayland-dev xorg-dev
      - name: Build
        run: python scripts/tests.py --build --mockAndroid --config release --cmake='-DVVL_CPP_STANDARD=20 -DUSE_ROBIN_HOOD_HASHING=ON'
        env:
          CC: clang
          CXX: clang++
      - name: Test Max Profile
        run: python scripts/tests.py --test --mockAndroid
        env:
          VK_KHRONOS_PROFILES_PROFILE_FILE: ${{ github.workspace }}/tests/device_profiles/max_profile.json

  windows:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, amd64_x86 ]
        config: [ debug, release ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Install build dependencies
        run: python3 -m pip install jsonschema pyparsing
      - name: Cache dependent components
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            build-ci/external/glslang/build/install
            build-ci/external/googltest/build/install
            build-ci/external/mimalloc/build/install
            build-ci/external/robin-hood-hashing/build/install
            build-ci/external/SPIRV-Headers/build/install
            build-ci/external/SPIRV-Tools/build/install
            build-ci/external/Vulkan-Headers/build/install
          key: windows-dependencies-${{ matrix.arch }}-${{ matrix.config }}-${{ hashfiles('scripts/known_good.json') }}
      - name: Build
        run: python3 scripts/tests.py --build --config ${{ matrix.config }} --cmake='-DUPDATE_DEPS_SKIP_EXISTING_INSTALL=ON'
      - name: Test Max Profile
        run: python scripts/tests.py --test

  android:
      env:
        CMAKE_C_COMPILER_LAUNCHER: ccache
        CMAKE_CXX_COMPILER_LAUNCHER: ccache
      runs-on: ubuntu-22.04
      strategy:
        matrix:
          abi: [ arm64-v8a ]
          build_tests: [ "ON" ]
          stl_type: ["c++_shared"]
          include:
          - abi: armeabi-v7a
            build_tests: "OFF"
            stl_type: c++_static

      steps:
        - uses: actions/checkout@v3
        - uses: lukka/get-cmake@latest
        - name: Setup ccache
          uses: hendrikmuhs/ccache-action@v1.2
          with:
            key: android-${{ matrix.abi }}-${{ matrix.build_tests }}-${{ matrix.stl_type }}
        - name: Configure
          run: |
            cmake -S . -B build/ --toolchain $ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
            -D ANDROID_PLATFORM=26 \
            -D CMAKE_ANDROID_ARCH_ABI=${{ matrix.abi }} \
            -D CMAKE_ANDROID_STL_TYPE=${{ matrix.stl_type }} \
            -D ANDROID_USE_LEGACY_TOOLCHAIN_FILE=NO \
            -D CMAKE_BUILD_TYPE=Debug \
            -D BUILD_TESTS=${{ matrix.build_tests }} \
            -D UPDATE_DEPS=ON \
            -D BUILD_WERROR=ON
        - name: Build
          run: cmake --build build/
        - name: Test
          working-directory: ./build
          run: ctest --output-on-failure -C Debug

  macos:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ macos-11, macos-12 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: lukka/get-cmake@latest
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: macos-${{matrix.os}}
      - name: Configure
        run: |
          cmake -S . -B build/ \
          -D BUILD_TESTS=OFF \
          -D BUILD_WERROR=ON \
          -D UPDATE_DEPS=ON \
          -D CMAKE_BUILD_TYPE=Debug
        env:
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
      - run: cmake --build build
      - run: cmake --install build --prefix /tmp
      # Helps verify install location and prints the exported symbols
      - run: nm -gU /tmp/lib/libVkLayer_khronos_validation.dylib

  mingw:
    env:
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: mingw-ccache
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: lukka/get-cmake@latest
      - name: GCC Version
        run: gcc --version # If this fails MINGW is not setup correctly
      - name: Configure
        run: cmake -S. -B build -D BUILD_WERROR=ON -D UPDATE_DEPS=ON -D CMAKE_BUILD_TYPE=Release
        env:
          LDFLAGS: -fuse-ld=lld # MINGW linking is very slow. Use llvm linker instead.
      - name: Build
        run: cmake --build build -- --quiet
      - name: Install
        run: cmake --install build --prefix build/install
      - name: MinGW ccache stats # The Post Setup ccache doesn't work right on MinGW
        run: ccache --show-stats

  # Test to ensure we don't accidentally break the Chromium build.
  integration_test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install WSI dependencies
        run: sudo apt-get -qq update && sudo apt-get install -y libwayland-dev xorg-dev
      - name: Test chromium build
        run: python scripts/gn.py

  check_vvl:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install python dependencies
        run: python3 -m pip install jsonschema pyparsing
      - run: scripts/update_deps.py --dir ext --no-build
      - run: scripts/generate_source.py --verify ext/Vulkan-Headers/registry/ ext/SPIRV-Headers/include/spirv/unified1/
      - run: scripts/vk_validation_stats.py ext/Vulkan-Headers/registry/validusage.json -summary -c
